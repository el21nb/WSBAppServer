rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

   
    
    match /{document=**} {
      allow read, write: if false;
    }
    //https://www.youtube.com/watch?v=VDulvfBpzZE
    function documentFieldsCheckout(requiredFields, optionalFields){
      let allFields = requiredFields.concat(optionalFields);
      return request.resource.data.keys().hasAll(requiredFields) &&
      request.resource.data.keys().hasOnly(allFields);
    }

    function journeyBusStopFieldsCheckout(){
      let requiredFields = ["arrivalTime", "busStop"];
      return request.resource.data.keys().hasAll(requiredFields) &&
      request.resource.data.keys().hasOnly(requiredFields);
    }

    function ticketFieldsCheckout(){
      let requiredTicketFields = ["busStopId", "childId", "journeyId", "ownerId", "pickUp", "schoolTicket", "ticketId"];
      return request.resource.data.keys().hasAll(requiredTicketFields) &&
      request.resource.data.keys().hasOnly(requiredTicketFields);
    }

    function journeyFieldsCheckout(){
      let requiredJourneyFields = ["OutwardJourney", "driverContact", "id", "journeyDateTime", "driverId"];
      return request.resource.data.keys().hasAll(requiredJourneyFields) &&
      request.resource.data.keys().hasOnly(requiredJourneyFields);
    }

    function passengerFieldsCheckout(){
      let requiredPassengerFields = ["Child", "parentId", "Jacket", "JacketAssignTime", "JacketDeassignTime", "dropOffTime", "pickUpTime"];
      return request.resource.data.keys().hasAll(requiredPassengerFields) &&
      request.resource.data.keys().hasOnly(requiredPassengerFields);
    }

    function busStopChildFieldsCheckout() {
      let requiredBusStopChildFields = ["childContacts", "classCode", "firstName", "id", "lastName", "parentId"];
      return request.resource.data.keys().hasAll(requiredBusStopChildFields) &&
     request.resource.data.keys().hasOnly(requiredBusStopChildFields);
    }

    // function journeyBelongsToDriver(){
    //       returnn (get(/databases/$(database)/documents/Journeys/$(journeyDocument)).data.driverId == request.auth.uid);
    // }


    function userIsAuthorised(){
      return request.auth.uid != null;
    }

    function userIsParent(){
      return request.auth.token.parent;
    }
    function userIsDriver(){
      return request.auth.token.driver;
    }
    function userIsAdmin(){
      return request.auth.token.admin;
    }
    function userIsStaff(){
      return request.auth.token.staff;
    }
    
      match /BusStops/{busStopDocument}{
      allow read: if userIsAuthorised();

      allow create: if userIsAuthorised() &&
      userIsAdmin() &&
      documentFieldsCheckout(["address", "id", "name", "latitude","longitude"], []);

      allow update: if userIsAuthorised() &&
      userIsAdmin() &&
      documentFieldsCheckout(["address", "id", "name"], []);

      allow delete: if userIsAuthorised() &&
      userIsAdmin();
    }

    match /Children/{childDocument}{

      allow read: if userIsAuthorised() &&
      (userIsAdmin() || 
      userIsDriver() ||
      userIsStaff() ||
      (userIsParent() && 
      (resource.data.parentId == request.auth.uid)));

      allow create: if userIsAuthorised() &&
      documentFieldsCheckout(["childContacts", "classCode", "firstName", "id", "lastName", "parentId"],[]) &&
      (userIsAdmin() ||
      (userIsParent() &&
      request.resource.data.parentId == request.auth.uid));

      allow update: if userIsAuthorised() &&
      documentFieldsCheckout(["childContacts", "classCode", "firstName", "id", "lastName", "parentId"],[]) &&
      (userIsAdmin() ||
      (userIsParent() &&
      resource.data.parentId == request.auth.uid));

      allow delete: if userIsAuthorised() &&
      userIsAdmin()||
      (userIsParent() &&
      resource.data.parentId == request.auth.uid);
    }

      match /Jackets/{jacketDocument}{
      allow read: if userIsAuthorised();

      allow create, update: if userIsAuthorised() &&
      userIsAdmin() && 
      documentFieldsCheckout(["identifier"],[]);

      allow delete: if userIsAuthorised() &&
      userIsAdmin();
    }

      match /Tickets/{ticketDocument}{
        allow get: if userIsAuthorised() &&
        (userIsAdmin() ||
        userIsDriver() ||
        (userIsStaff() &&
        resource.data.ownerId == request.auth.uid) ||
        (userIsParent() && 
        resource.data.ownerId == request.auth.uid));

        allow list: if userIsAuthorised() &&
        (userIsAdmin() ||
        userIsDriver() ||
        (userIsStaff() &&
        resource.data.ownerId == request.auth.uid) ||
        (userIsParent() 
        && resource.data.ownerId == request.auth.uid));

        allow create: if userIsAuthorised() &&
        ticketFieldsCheckout() &&
        (userIsAdmin() ||
        ((userIsParent()||userIsStaff()) &&
        request.resource.data.ownerId == request.auth.uid));

        allow update: if userIsAuthorised() &&
        ticketFieldsCheckout() &&
        (userIsAdmin() ||
        ((userIsParent()||userIsStaff()) &&
        resource.data.ownerId == request.auth.uid));

        allow delete: if userIsAuthorised() &&
        (userIsAdmin() ||
        ((userIsParent()||userIsStaff()) &&
        resource.data.ownerId == request.auth.uid));
    }

    match /Journeys/{journeyDocument}{
      
    function journeyBelongsToDriver(){
        return (get(/databases/$(database)/documents/Journeys/$(journeyDocument)).data.driverId == request.auth.uid);
      }

      allow create: if userIsAuthorised() &&
      journeyFieldsCheckout() &&
      userIsAdmin();

      allow update: if userIsAuthorised() &&
      journeyFieldsCheckout() &&
      (userIsAdmin() ||
      (userIsDriver() &&
      resource.data.driverId == request.auth.uid));

      allow delete: if false;
      
      allow read: if userIsAuthorised();

      match /Passengers/{passengerDocument}{

        function passengerBelongsToParent(){
         return request.auth.uid == resource.data.parentId;
        }
        
        allow create: if userIsAuthorised() &&
        passengerFieldsCheckout() &&
        (userIsAdmin() || 
        (userIsDriver() &&
        journeyBelongsToDriver()));        
        
        allow update:  if userIsAuthorised() &&
        passengerFieldsCheckout() &&
        (userIsAdmin() || 
        (userIsDriver() &&
        journeyBelongsToDriver()));        
      
        allow delete: if false;

        allow get: if  userIsAuthorised() &&
        (userIsAdmin() || 
        userIsStaff() ||
        (userIsDriver() &&
        journeyBelongsToDriver()) ||
        (userIsParent() && passengerBelongsToParent()));

        allow list: if userIsAuthorised() &&
        (userIsAdmin() || 
        userIsStaff() ||
        (userIsDriver() &&
        journeyBelongsToDriver()) ||
        (userIsParent() && passengerBelongsToParent()));
        

        }

        match /JourneyBusStops/{journeyBusStopDocument}{
        
        allow create: if userIsAuthorised() &&
        journeyBusStopFieldsCheckout() &&
        userIsAdmin();        
        
        allow update:  if userIsAuthorised() &&
        journeyBusStopFieldsCheckout() &&
        (userIsAdmin() || 
        (userIsDriver() &&
        journeyBelongsToDriver()));        
      
        allow delete: if userIsAuthorised() &&
        userIsAdmin();

        allow read: if  userIsAuthorised() &&
        (userIsAdmin() || 
        userIsStaff() ||
        userIsParent()||
        (userIsDriver() &&
        journeyBelongsToDriver()));
        
          match /busStopChildren/{busStopChildDocument}{
          
          function busStopChildBelongsToParent(){
              //return (get(/databases/$(database)/documents/Journeys/$(journeyDocument)/JourneyBusStops/$(journeyBusStopDocument)/busStopChildren/$(busStopChildDocument)).data.parentId == request.auth.uid);
              return request.auth.uid == resource.data.parentId;
    
          }

          allow create: if userIsAuthorised() &&
          busStopChildFieldsCheckout() &&
          (userIsAdmin()||
          (userIsParent() &&
          request.resource.data.parentId == request.auth.uid));

          allow update: if userIsAuthorised() &&
          busStopChildFieldsCheckout() &&
          (userIsAdmin()||
          (userIsParent() &&
          busStopChildBelongsToParent())); 

          allow delete: if userIsAuthorised() &&
          (userIsAdmin()||
          (userIsParent() &&
          busStopChildBelongsToParent()));             

          allow get: if  userIsAuthorised() &&
          (userIsAdmin() || 
          userIsStaff() ||
          (userIsDriver() &&
          journeyBelongsToDriver()) ||
          (userIsParent() && busStopChildBelongsToParent()));

          allow list: if userIsAuthorised() &&
          (userIsAdmin() || 
          userIsStaff() ||
          (userIsDriver() &&
          journeyBelongsToDriver()) ||
          (userIsParent() && busStopChildBelongsToParent()));
     
          }
        
        }

       
    }
  }
}